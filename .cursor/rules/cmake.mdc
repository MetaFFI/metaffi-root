---
description: get information about CMake scripts directory (cmake/)
alwaysApply: false
---
# MetaFFI CMake Framework

Core CMake framework for building MetaFFI components with standardized build configurations and utilities.

## CMake Files Overview

### Core Build Files
- `GlobalSettings.cmake`: Core build settings and policies. Always include this first. Sets C++20, UTF-8, and platform-specific configurations.
- `Utils.cmake`: Common utility functions and macros. Contains file operations, path handling, and general build utilities.
- `CPP.cmake`: C++ specific build macros and settings. Use for C++ projects. Contains `c_cpp_exe` and `c_cpp_shared_lib` macros.

### Language Support
- `Go.cmake`: Go language build support. Use for Go projects. Handles Go modules and dependencies.
- `Python3.cmake`: Python3 build support. Use for Python projects. Manages Python packages and virtual environments.
- `JVM.cmake`: Java/Kotlin build support. Use for JVM-based projects. Handles JAR files and Java dependencies.

### Package Management
- `PackageManagement.cmake`: Package handling utilities. Use for managing external dependencies and packages.
- `InstallUtils.cmake`: Installation utilities. Use for handling installation paths and file copying.
- `MetaFFIGitRepository.cmake`: Git repository utilities. Use for managing Git-based dependencies.

## Global Settings
- Uses C++20 standard
- Enables UTF-8 encoding for MSVC
- Sets appropriate CMake policies (CMP0110, CMP0022, CMP0091, CMP0077)
- Configures platform-specific settings for Windows and Linux

## Key Components
1. Build Utilities
   - `c_cpp_exe`: Builds executables with proper dependency handling
   - `c_cpp_shared_lib`: Builds shared libraries with proper dependency handling
   - `collect_c_cpp_files`: Collects C/C++ source files
   - `collect_c_cpp_files_recursively`: Recursively collects C/C++ source files

2. Language Support
   - C++: Full support with modern C++ features
   - Go: Go module and build support
   - Python3: Python module and package support
   - JVM: Java/Kotlin support

3. Package Management
   - Standardized package handling
   - Dependency management
   - Installation utilities

## Development Guidelines
- Use provided macros for building executables and shared libraries
- Follow platform-specific conventions (Windows/Linux)
- Use UTF-8 encoding for source files
- Handle dependencies appropriately using provided utilities
- Use METAFFI_HOME environment variable for installation paths
- Follow the standardized directory structure for includes and sources

## Platform Support
- Windows: Full support with MSVC
- Linux: Full support with GCC/Clang
- Ubuntu: Specific optimizations and configurations
- macOS: Limited support (not fully implemented)

## Best Practices
- Use provided macros instead of raw CMake commands
- Handle dependencies explicitly
- Use proper RPATH settings for shared libraries
- Follow the project's directory structure conventions
- Use UTF-8 encoding for all source files
- Handle platform-specific differences through provided utilities

# Auto-attach for:
# - CMakeLists.txt
# - *.cmake



