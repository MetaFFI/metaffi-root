---
description: get information about containers published by MetaFFI
alwaysApply: false
---
# Containers (Docker Setup)

The `containers/` directory contains Docker configuration files and related scripts to set up consistent build and test environments for MetaFFI. This is useful for continuous integration or developers who want to build MetaFFI without manually installing all language dependencies on their host system.

Key files in this directory:

- **metaffi-u2204.dockerfile:** A Dockerfile for an Ubuntu 22.04 environment. It likely starts from a base Ubuntu 22.04 image and installs all prerequisites for building MetaFFI (such as build-essential, CMake, Go toolchain, JDK, Python 3.11, etc.). It may also use `containers/requirements.txt` (a pip or apt requirement list) to install specific Python packages or other tools needed for building or testing MetaFFI.
- **metaffi-win-core2022.dockerfile:** A Dockerfile for a Windows Core 2022 environment. This would set up a Windows Server Core container with MSVC build tools, .NET or Visual C++ redistributables if needed, and possibly Java and Python in a Windows context. Building MetaFFI on Windows ensures that the Windows versions of the plugins and core are produced (e.g., `.dll` files).
- **requirements.txt:** This might list Python packages needed in the container (for example, `pyinstaller` or test frameworks). It would be used in the Dockerfiles to `pip install -r requirements.txt` for the environment.
- There may be additional scripts to facilitate using these Docker images (such as entrypoint scripts or `docker-compose` files, though none are explicitly listed here).

Using these Dockerfiles, one can build images that contain **all dependencies** (compilers, language runtimes, libraries) so that MetaFFI can be compiled and its tests run in a controlled setting. For instance, the Ubuntu container would include GCC/Clang, OpenJDK, Python3.11, and Go; the Windows container would have MSVC, the JDK, and Python for Windows.

These container configurations ensure **environment consistency**. By building MetaFFI inside these images, developers avoid issues with mismatched compiler versions or missing dependencies on their host. This is especially important given MetaFFI’s complexity (mixing C++, Go, Python, and Java code). The Docker containers can also be used to run MetaFFI’s test suite in an isolated environment, ensuring that cross-language calls work when all relevant runtimes are present.

In summary, the `containers/` directory provides Docker setups to **build and validate MetaFFI across platforms**. This contributes to reproducible builds and simplified setup for new contributors or CI pipelines, guaranteeing that the core and all plugins can be built and tested under known-good conditions.
