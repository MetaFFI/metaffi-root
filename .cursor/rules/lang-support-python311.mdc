
# Python Plugin (`lang-plugin-python311/`)

This directory implements the **MetaFFI plugin for Python 3.11**, enabling Python to be used both as a **host language** (calling foreign functions) and as a **guest language** (being called by other languages).

It is structured according to the MetaFFI plugin architecture and includes:

| Subdirectory       | Purpose                                                               |
|--------------------|-----------------------------------------------------------------------|
| `api/`             | Python API package to call other languages from Python               |
| `api/tests/`       | End-to-end tests where Python is the host                            |
| `compiler/`        | Compiler plugin (not required for Python, may be minimal)            |
| `idl/`             | IDL plugin that parses Python source/code to generate MetaFFI IDL    |
| `runtime/`         | Runtime plugin that embeds and interacts with Python as a guest      |

Because Python supports full C-level embedding (via Python C API), **no guest compilation is required**.

## Design Notes

- Python’s C API allows loading and invoking functions from `.py` files and modules without recompilation.
- The runtime plugin is a C++ shared library that embeds the Python interpreter and uses `PyImport_`, `PyObject_` APIs to load and invoke code.
- The API module is a standard Python package (installable via `pip`) that wraps MetaFFI’s C interface for Python.

This plugin is one of the **reference implementations** for dynamic languages in MetaFFI.

(For details, see prompts for each subdirectory.)


# Python API Module (`lang-plugin-python311/api/`)

This directory contains the **MetaFFI API package for Python**, which allows Python to be used as a **host language**.

## Purpose

- Wraps the MetaFFI C API (`XLLR`) using Python's FFI tools (e.g., `ctypes`, or possibly a C extension).
- Allows Python developers to:
  - Load foreign runtime plugins (e.g., `go`, `openjdk`)
  - Load modules and functions defined in foreign languages
  - Invoke them using familiar Pythonic APIs

## Core Features

- **Runtime Management**:
  - Load and unload runtimes via `load_runtime("go")`
  - Calls into `xllr_load_runtime_plugin`

- **Module and Function Handling**:
  - Load modules (IDL-based or native)
  - Get callable function handles
  - Bind foreign functions to Python callables

- **Data Conversion**:
  - Convert Python types to CDTS (MetaFFI’s internal type system)
  - Wrap return values from CDTS back to Python types
  - Handle opaque handles for foreign objects

- **Error Handling**:
  - Capture errors from foreign runtimes (e.g., exceptions in Go or Java)
  - Translate them into Python exceptions

## Developer Usage

A Python developer can use MetaFFI like this:

```python
from metaffi import load_runtime, load_function

load_runtime("go")
add = load_function("mathlib.add")  # Go function
print(add(2, 3))  # 5
```

## Summary
This module is the Pythonic API surface for MetaFFI. It provides a simple interface for cross-language invocation, hiding the C complexity of XLLR. It is essential for using Python as a host language in MetaFFI.


---

**`lang-plugin-python311/api/tests/` (Python Host Tests)**

```md
# Python API Tests (`lang-plugin-python311/api/tests/`)

This directory contains **end-to-end tests** where Python acts as the **host**, calling into other languages (e.g., Java, Go).

## Test Structure

- Load foreign runtimes (e.g., `openjdk`, `go`)
- Load foreign modules (e.g., `.idl.json`)
- Invoke foreign functions from Python
- Verify:
  - Argument conversion (Python → CDT → Foreign)
  - Return value conversion
  - Opaque handle support
  - Exception handling

## Purpose

- Validate the Python API module
- Serve as working reference examples for agents
- Ensure compatibility with other guest plugins

## Example

```python
from metaffi import load_runtime, load_module

load_runtime("openjdk")
mod = load_module("log4j.idl.json")
logger = mod.get_class("Logger")
logger.info("Hello from Python!")
```

## Summary
This suite validates that MetaFFI’s Python host support works end-to-end. It confirms the correctness of CDTS conversion, function resolution, and error propagation.


---

**`lang-plugin-python311/compiler/` (Python Compiler Plugin)**

```md
# Python Compiler Plugin (`lang-plugin-python311/compiler/`)

This directory formally implements the **MetaFFI compiler plugin for Python**, though like Java, **no guest compiler is required**.

## Purpose

- Exists to conform to the plugin architecture (`language_plugin_interface.h`)
- May return "not implemented" for `compile_guest` or `compile_host`
- Provides a no-op shared object with an `init_plugin()` function

## Optional Use

- Could be extended to:
  - Generate Python wrappers for foreign functions
  - Provide decorators or type hints for better DX
  - Validate or patch IDL usage in Python

## Summary

This is a **placeholder implementation**, required for consistency but typically unused. Python’s C API supports direct embedding, so code generation is not needed.

(See `idl/` for extracting Python IDL; see `runtime/` for guest behavior.)


# Python IDL Plugin (`lang-plugin-python311/idl/`)

This directory implements the **IDL plugin** for Python 3.11, following MetaFFI's dynamic loading patterns and embedded code strategy.

## Purpose

- Receives Python source code (file path, module path, or package name)
- Parses Python code using embedded Python extraction logic
- Extracts:
  - Functions with parameters and return types (from type annotations)
  - Classes with methods, fields, and class variables
  - Module/package structure and metadata
  - Global variables and constants

- Outputs **MetaFFI IDL JSON** representing Python entities for cross-language access

## Implementation Architecture

### Dynamic Loading Pattern
- **No static linking**: Plugin dynamically loads Python runtime at runtime
- **Function pointers**: Uses `load_python3_api()` to load Python symbols dynamically
- **Self-contained**: Embeds Python extraction code as strings executed via Python C API
- **Runtime independence**: No compile-time dependencies on Python development libraries

### Embedded Code Strategy
- **Python extraction logic**: Embedded as strings in C++ code (`py_extractor.py` content)
- **Execution via C API**: Uses `pPyRun_SimpleString()` and `pPyObject_CallObject()`
- **No external files**: All extraction logic contained within the plugin binary
- **Robust file handling**: Uses `importlib.util.spec_from_file_location` for arbitrary file paths

### Entity Extraction Patterns
- **File-based**: Parse single `.py` file and extract all entities
- **Package-based**: Import Python package and extract all modules recursively
- **Module-based**: Import specific module and extract its entities
- **Class variables**: Extract static/class-level fields from `__dict__` analysis

## Build System Integration

### Output Structure
- **Plugin output**: Built to `./python311` directory
- **Test naming**: Uses `python311_idl_plugin_test` convention
- **Dependencies**: Tests depend on `metaffi.idl.python311` library

### CMake Configuration
```cmake
# IDL plugin build
add_library(metaffi.idl.python311 SHARED
    python_idl_plugin.cpp
    python3_api_wrapper.cpp
    xllr_static_capi_loader.cpp
)

# Test executable
add_executable(python311_idl_plugin_test
    idl_plugin_test.cpp
    python_idl_plugin.cpp
    python3_api_wrapper.cpp
    xllr_static_capi_loader.cpp
)
```

## Memory Management & Error Handling

### XLLR Integration
- **Memory allocation**: Use `xllr_alloc_string()` for all error messages
- **Error propagation**: Return structured JSON errors for consistency
- **Resource cleanup**: Follow Python reference counting (`Py_DECREF()`)

### Error Patterns
```cpp
// Correct pattern
*out_err = xllr_alloc_string(error_message.c_str(), error_message.length());

// Wrong pattern (causes memory leaks)
*out_err = strdup(error_message.c_str());
```

## Testing Strategy

### Unit Testing
- **Extraction logic**: Test Python entity extraction separately
- **JSON generation**: Validate MetaFFI IDL JSON format compliance
- **Type conversion**: Test Python type to MetaFFI type mapping
- **Edge cases**: Complex types, nested structures, missing annotations

### Integration Testing
- **C interface**: Test `parse_idl()` function with doctest framework
- **Dynamic library**: Test loading and function calls
- **End-to-end**: Complete pipeline from Python source to JSON output

### Test Scenarios
1. **File parsing**: Single `.py` file extraction
2. **Package parsing**: Python package/module extraction with `sys.path` management
3. **Class variables**: Extraction of static/class-level fields
4. **Type annotations**: Functions with explicit return type annotations
5. **Error conditions**: Invalid files, missing dependencies, runtime errors

## Key Features

### Type System Support
- **Type annotations**: Extract from `__annotations__` and function signatures
- **Default types**: Functions without annotations return `"any"` type
- **Complex types**: Support for `Any`, `Dict`, `List`, and other generic types
- **Type conversion**: `py_type_to_metaffi_type()` for Python→MetaFFI type mapping

### Class Support
- **Methods**: Extract all user-defined methods (excluding dunder methods)
- **Fields**: Extract class variables and instance fields
- **Inheritance**: Support for class hierarchies and method resolution
- **Properties**: Extract property decorators and their types

### Package Support
- **Module imports**: Handle `import` and `from ... import` statements
- **Relative imports**: Support for relative import paths
- **Package structure**: Extract complete package hierarchies
- **Dependency management**: Handle import dependencies and circular references

## Limitations & Considerations

### Python Dynamic Nature
- **Static types not guaranteed**: Python is dynamic, types may be runtime-only
- **Default to `cdt_any`**: Unknown types default to opaque/any representation
- **Runtime introspection**: Some type information only available at runtime

### Performance Considerations
- **Lazy initialization**: Python runtime initialized only when needed
- **Memory efficiency**: Minimize object creation and copying
- **Thread safety**: Handle Python GIL and concurrent access
- **Caching**: Consider caching extracted entities for repeated access

## Deployment Best Practices

### Self-Contained Deployment
- **No external dependencies**: Plugin includes all necessary runtime code
- **Version flexibility**: Support multiple Python versions via dynamic loading
- **Platform independence**: Handle different library names (`libpython3.11.so` vs `python311.dll`)

### Debugging Support
- **Symbol inspection**: Use `nm` and `objdump` for dynamic loading verification
- **Runtime debugging**: Language-specific debuggers for embedded Python code
- **Error logging**: Comprehensive error messages with context
- **Memory profiling**: Tools like Valgrind for leak detection

## Summary

This plugin enables Python code to be **called from other languages** by generating the necessary IDL from Python modules. It follows MetaFFI's dynamic loading patterns, uses embedded code execution, and provides comprehensive entity extraction including functions, classes, and class variables. Essential for using Python as a guest language in MetaFFI.

**For detailed implementation patterns and best practices, see `python311_idl_thoughts.mdc`.**

(For runtime support, see `runtime/`.)


# Python Runtime Plugin (`lang-plugin-python311/runtime/`)

This directory implements the **runtime plugin** for Python. It embeds the Python 3.11 interpreter and exposes callable Python entities as XCalls to MetaFFI.

## Responsibilities

- Implements `runtime_plugin_interface.h`
- Initializes the Python interpreter (`Py_Initialize`)
- Loads `.py` modules via `PyImport_ImportModule`
- Loads functions or classes via `PyObject_GetAttrString`
- Converts CDTS to/from Python types:
  - `cdt_string` ↔ `str`
  - `cdt_float64` ↔ `float`
  - `cdt_array` ↔ `list`
  - `cdt_opaque` ↔ `PyObject*`

## Execution Flow

1. `load_runtime()` initializes Python
2. `load_module()` loads a Python file
3. `load_entity()` finds a function/class
4. `call()` invokes `PyObject_CallObject(...)` using converted CDTs
5. Return value is wrapped in a CDT and sent back to host

## Error Handling

- Catches Python exceptions
- Converts `PyErr_Print()` or `PyErr_Fetch()` into `char** err`
- Prevents crashes on invalid input

## Summary

This is a **fully embedded Python runtime plugin** that allows foreign hosts (e.g., Java, Go) to call Python code transparently. It uses the Python C API directly and manages all interpreter lifecycle, CDTS conversion, and exception handling.

(For host-side Python usage, see `api/`; for IDL extraction, see `idl/`.)

This is a **fully embedded Python runtime plugin** that allows foreign hosts (e.g., Java, Go) to call Python code transparently. It uses the Python C API directly and manages all interpreter lifecycle, CDTS conversion, and exception handling.

(For host-side Python usage, see `api/`; for IDL extraction, see `idl/`.)
