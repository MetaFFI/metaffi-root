---
description: get information about OpenJDK language support (lang-plugin-openjdk)
alwaysApply: false
---
# OpenJDK/Java Plugin (`lang-plugin-openjdk/`)

This directory implements the **MetaFFI plugin for Java**, based on the OpenJDK. It allows Java code to act both as a **host** language (calling into foreign code) and as a **guest** language (being called from other languages). 

It uses the Java Native Interface (JNI) to interact between MetaFFI’s C core (XLLR) and the JVM, and employs reflection to dynamically load and invoke Java entities.

## Purpose

- Provides **Java runtime plugin** to expose Java functions, methods, classes to MetaFFI (for calls *into* Java).
- Provides a **Java API module** (as a JAR) to allow Java programs to call foreign code (calls *from* Java).
- Implements optional compiler/IDL plugin capabilities where needed (though less essential due to Java reflection).
- Includes extended support for deep integration via **xllr-openjdk-bridge**, which embeds and manages the JVM.

## Key Subdirectories

| Subdirectory             | Role                                                                 |
|--------------------------|----------------------------------------------------------------------|
| `api/`                   | Java API library (JAR) for host-side use                             |
| `api/tests/`             | End-to-end tests where Java is the host                              |
| `compiler/`              | Optional compiler plugin (may be minimal, as Java doesn’t require C wrappers) |
| `idl/`                   | IDL plugin that analyzes `.java`/`.jar` files to produce MetaFFI IDL |
| `runtime/`               | C++ implementation of MetaFFI’s runtime plugin interface for Java    |
| `xllr-openjdk-bridge/`   | C++/JNI bridge between MetaFFI and the JVM runtime                   |

This structure aligns with MetaFFI’s plugin architecture (see Plugin Architecture prompt), where each plugin includes a runtime, API, and optionally compiler + IDL components.

## Java-Specific Considerations

Java is unique among MetaFFI-supported languages due to its **dynamic classloading** and **introspective type system**. As such:

- **Guest-side compilation (compiler plugin)** is often **not required**, because JNI and reflection allow invoking methods without needing C-callable wrappers.
- The **runtime plugin** is capable of loading any compiled Java class or JAR dynamically at runtime, using only its name and method signature from the IDL.
- Java object identity, GC, and classloader management are complex, so the runtime plugin includes special logic in `xllr-openjdk-bridge/` to manage the lifecycle of the JVM and class references.

## High-Level Call Flow

- *Calling Java (Java as Guest)*:
  1. The IDL plugin scans a `.jar` or `.java` file and produces MetaFFI IDL.
  2. The Java runtime plugin loads the JVM (if not already loaded).
  3. MetaFFI loads a class and method described in the IDL using JNI.
  4. An XCall is constructed that, when invoked, executes the Java method and returns a CDTS result.

- *Calling Foreign Code from Java (Java as Host)*:
  1. Java code imports and uses the `metaffi-api.jar`.
  2. The API wraps the XLLR C interface via JNI.
  3. The Java host can load other runtimes (e.g., Python) and invoke their functions using the MetaFFI API.

This enables full bidirectional interop between Java and all other languages supported by MetaFFI.

## Summary

The Java plugin is a fully integrated MetaFFI plugin enabling:
- Java code to call into any other supported language (via API).
- Other languages to call Java functions and classes (via runtime plugin).
- Rich type conversion and lifecycle management via JNI and CDTS.

Because Java supports runtime reflection, this plugin avoids the need for C-callable stubs and instead uses **dynamic method resolution**. However, it also includes custom C++ infrastructure (`xllr-openjdk-bridge/`) to manage JVM startup, threading, and stable JNI contexts.

This plugin is an essential demonstration of **dynamic language interoperability** using MetaFFI, combining C++, JNI, Java, and MetaFFI’s CDTS seamlessly.

(For deeper analysis of each component, see subdirectory prompts: `api/`, `runtime/`, `xllr-openjdk-bridge/`, etc.)


# Java API Module (`lang-plugin-openjdk/api/`)

This directory implements the **MetaFFI API for Java**, packaged as a Java library (`metaffi-api.jar`). It allows Java code to act as a **host language**—that is, to call foreign functions written in any language supported by MetaFFI (e.g., Python, Go, etc.).

## Purpose

- Wraps the **XLLR C API** using JNI (Java Native Interface), enabling Java applications to:
  - Load MetaFFI runtime plugins (e.g., `python311`, `go`, etc.).
  - Load foreign modules or entities via MetaFFI IDL.
  - Invoke foreign functions and manage returned values.
- Converts between Java types and MetaFFI's **Common Data Types System (CDTS)**.
- Enables seamless integration of foreign code into Java projects, as if they were native Java classes/functions.

## Core Responsibilities

### 1. **JNI Wrapper Around XLLR**

- Loads the XLLR shared library at runtime (e.g., `libxllr.so` / `xllr.dll`).
- Uses JNI to bind C functions exported by XLLR:
  - `xllr_load_runtime_plugin()`
  - `xllr_make_callable()`
  - `xllr_call_xcall()`
  - `xllr_free_cdt()`, etc.

These are wrapped in idiomatic Java methods, allowing Java code to interact with MetaFFI without writing any native code manually.

### 2. **API Classes and Interfaces**

Typical public-facing Java classes include:

- **`MetaFFIRuntime`**:
  - Manages loaded runtimes (e.g., calls `load_runtime("python311")`).
  - Tracks lifecycle of runtime plugins and releases them on shutdown.

- **`MetaFFIModule`**:
  - Represents a foreign module loaded from another language (e.g., a Python script or Go shared object).
  - Loads functions/entities via IDL.
  - Allows fetching callable handles.

- **`MetaFFIFunction` / `XCall`**:
  - Represents a callable function from a foreign language.
  - Provides `invoke()` method that marshals arguments, performs the cross-language call, and converts return values.

- **`CDT`**:
  - A Java-side wrapper for MetaFFI's CDTS.
  - Represents primitives, arrays, structs, or opaque handles.
  - Provides conversion functions from Java types (e.g., `CDT.fromString("hello")`, `CDT.toInt()`, etc.).
  - Internally backed by native memory or JNI references.

- **`OpaqueHandle`**:
  - Represents foreign objects returned by guest runtimes (e.g., Python object or Go struct).
  - Can be passed across calls or stored for later use.
  - Internally holds a reference understood only by the guest runtime.

These classes abstract away the JNI/C complexities and give a natural Java interface for working with foreign functions and data.

### 3. **Memory and Lifecycle Management**

- Java does not use explicit malloc/free, but the MetaFFI C core does. Therefore:
  - The Java API includes logic to ensure CDT values and other resources are **allocated and freed properly**.
  - Uses `finalize()` or `AutoCloseable` patterns to free native memory when Java objects are GC’ed.
  - When creating CDT arrays or structs, allocates via `xllr_malloc` and frees with `xllr_free` when appropriate.

### 4. **Thread Safety and JNI Contexts**

- Each Java thread calling into MetaFFI must attach to the JNI environment.
- The API ensures:
  - JNI thread attachment via `JNIEnv*`.
  - Proper detachment (if needed).
  - Thread-safe initialization of XLLR.

This guarantees that multiple threads in a Java host can safely call into foreign code.

### 5. **Usability Layer**

- The API is designed to make Java-to-foreign interaction ergonomic:
  - Fluent method calls like:
    ```java
    MetaFFIRuntime runtime = MetaFFIRuntime.load("python311");
    MetaFFIModule mod = runtime.loadModule("my_script.py");
    MetaFFIFunction f = mod.getFunction("greet");
    String result = f.invoke("world").toString();
    ```
  - Auto-boxing/unboxing between Java and CDT types.
  - Exception handling and type safety wrappers.

### 6. **Packaging and Distribution**

- The module is packaged as a **JAR file** (e.g., `metaffi-api.jar`).
- JNI shared libraries (`libxllr`, `libcdts`, plugin runtimes) are either bundled or expected to be pre-installed.
- Can be published to Maven or integrated into Java projects manually.

### 7. **Usage Context**

This API is used:
- In production Java applications to consume foreign libraries (e.g., call Python AI models or Go microservices).
- In `api/tests/` to write test cases verifying cross-language interactions.
- By agent systems needing to generate Java wrapper code (e.g., via host compilers).

It supports both **dynamic runtime use** and **code generation** approaches.

## Summary

This directory implements the **Java API layer for MetaFFI**, enabling Java developers to call functions from any other MetaFFI-supported language without writing native code. It wraps the MetaFFI core C APIs (XLLR) via JNI and provides:
- Native integration into Java class structure.
- CDTS conversion utilities.
- Memory and object lifecycle handling.
- High-level convenience abstractions.

It is the **primary interface for Java as a host**, and an essential building block in making Java a first-class participant in the MetaFFI interoperability system.

(For testing of this API in real use cases, see `api/tests/`; for guest-side logic, see `runtime/` and `xllr-openjdk-bridge/`.)


# Java API End-to-End Tests (`lang-plugin-openjdk/api/tests/`)

This directory contains **end-to-end tests** where **Java acts as the host language**, calling into foreign language guest functions via the MetaFFI Java API.

These tests validate that:
- Java can load and use the MetaFFI runtime
- Java code can call into guest language code (Python, Go, etc.)
- Cross-language invocation works as expected, including data marshalling and error handling

## Purpose

- Ensure that the `lang-plugin-openjdk/api/` module functions correctly
- Demonstrate real-world examples of cross-language calls from Java
- Act as a testbed for validating CDTS conversion, runtime plugin loading, and exception propagation

## Technical Overview

Each test follows a typical flow:

1. **Load MetaFFI runtime plugin** for a target guest language (e.g., Python or Go):
   ```java
   MetaFFI.loadRuntime("python311");
   ```

2. **Load foreign module** using a previously generated `.idl.json` file:
   ```java
   MetaFFIModule module = MetaFFI.loadModule("mathlib.idl.json");
   ```

3. **Access foreign function or class**:
   ```java
   MetaFFIFunction addFunc = module.getFunction("add");
   ```

4. **Call the function with arguments** and check results:
   ```java
   CDT[] args = new CDT[] { new CDT(5), new CDT(3) };
   CDT[] result = addFunc.call(args);
   assert result[0].asInt() == 8;
   ```

5. **Handle exceptions** and validate proper error messages when guest code fails.

## Characteristics

- Tests involve **actual guest runtimes**: nothing is mocked.
- Target functions (e.g., add, concat, sort) are implemented in guest languages and described via MetaFFI IDL.
- Guest language modules must be compiled and available before running the test (e.g., Go `.so`, Python `.py` modules).
- Tests are typically run using JUnit.

## Examples of What’s Tested

- Function calls with primitive types (int, float, string)
- Calls returning single or multiple values
- Interacting with guest classes or objects (e.g., constructors, methods)
- Passing opaque values between host and guest
- Propagating exceptions from guest back to host

## Why It’s in `api/tests/`

These tests specifically validate the **Java API module** (`lang-plugin-openjdk/api/`) and its interaction with guest runtimes. They're placed here to stay coupled with the host-side logic they are testing.

This is a general pattern in MetaFFI: end-to-end tests live in `api/tests/`, and they exercise the host language's ability to call into the MetaFFI system across language boundaries.

## Summary

This directory contains real cross-language tests where **Java is the host**. It validates the complete MetaFFI pipeline from Java → MetaFFI → guest plugin → foreign code.

It ensures that:
- Java API works as expected
- Runtime plugin loading is successful
- XCall invocation, CDTS conversion, and error handling are correct

It is essential for maintaining the reliability of Java as a host language in MetaFFI.


# Java Compiler Plugin (`lang-plugin-openjdk/compiler/`)

This directory contains the **MetaFFI compiler plugin for Java**, which adheres to the `language_plugin_interface.h` defined in the MetaFFI plugin SDK. However, unlike Go or Rust, Java **does not require guest-side wrapper generation**, thanks to its rich reflective C API (JNI). Therefore, this plugin is mostly a placeholder and coordination layer.

## Purpose

- Formally implements the MetaFFI **compiler plugin interface** so that Java is structurally compatible with MetaFFI's plugin architecture.
- Responds to CLI or agent requests to "compile" IDL targeting Java.
- **No actual code is generated or compiled** for guest-side usage, as Java runtime plugin loads classes and invokes methods directly via JNI and reflection.

## Guest Mode Behavior

When MetaFFI CLI or an agent runs:

```
metaffi compile --lang=openjdk --idl=my.idl.json --mode=guest
```

The plugin responds by:

- Validating the IDL structure.
- Verifying target classes or methods exist (optional).
- Producing either:
  - A no-op compiled artifact, or
  - A metadata file used at runtime to locate `.jar`/`.class` paths.

In most configurations, this stage simply passes through the IDL to the runtime plugin.

## Host Mode (Optional)

The plugin **may** support host-mode compilation, where Java wrappers are generated that use MetaFFI's Java API to invoke foreign functions (e.g., from Go or Python). In that case, it can:

- Generate host-side Java classes with methods that call MetaFFI under the hood.
- Provide optional DX enhancements (type-safe facades, naming adjustments).
- Import the `metaffi-core` Java package (host API).

This mode is **optional and not always implemented**.

## Implementation Highlights

- `Main.java`: Entrypoint for the plugin (loaded dynamically by MetaFFI core or CLI).
- `GuestCompiler.java`: Implements logic for guest-side (likely minimal or empty).
- `HostCompiler.java`: Optional; generates Java code for calling foreign entities.
- Interfaces in this directory are consistent with `plugin-sdk/compiler/java/`.

## When It’s Used

- Required when MetaFFI compiles an IDL where Java is the guest or host.
- Even if compilation is a no-op, the plugin ensures consistent plugin discovery and schema adherence.

## Summary

This directory implements the **Java compiler plugin** for MetaFFI, fulfilling its role in the modular plugin system even though **no guest-side code generation is needed**. Java code is loaded and called reflectively at runtime, so this plugin primarily exists to maintain architectural uniformity.

It may optionally generate host wrappers to simplify usage of foreign functions in Java.

(For runtime execution logic, see `lang-plugin-openjdk/runtime/` and `xllr-openjdk-bridge/`.)

# Java IDL Plugin (`lang-plugin-openjdk/idl/`)

This directory implements the **IDL plugin for Java**, responsible for analyzing Java code and generating a MetaFFI-compliant IDL (Interface Definition Language) representation.

## Purpose

- Receives Java source code, a `.jar` file, or a package name as input.
- Parses and analyzes classes, methods, parameters, and types using Java reflection or compile-time tools.
- Outputs a MetaFFI **IDL JSON** document that describes entities callable from foreign languages.

This is a critical step in allowing Java to be used as a **guest language** in MetaFFI — it defines what functions/classes can be exposed and how.

## Input Examples

- Path to `.jar`, `.class`, or `.java` files
- Fully qualified package name
- Directory containing Java modules

These are passed via MetaFFI CLI or agent to the plugin with:

```
metaffi idl --lang=openjdk --input=com.example.MyClass
```

## Output

A JSON file conforming to MetaFFI IDL schema, including:
- Function/method names
- Parameter types and order
- Return types
- Static/instance metadata
- Module/class references

This is consumed by the compiler (if needed) and runtime plugin to load and bind Java entities at runtime.

## Implementation Notes

- Uses Java reflection APIs (`ClassLoader`, `Method.getParameterTypes()`, etc.) or may use static analysis tools (like `javaparser`) if deeper inspection is needed.
- Implemented as a standalone CLI-compatible shared object or binary exposing `parse_idl(...)`, according to `plugin-sdk/compiler/idl_plugin_interface.h`.
- Delegates output structure to shared Go structs defined in `plugin-sdk/compiler/go/IDL/`.

## Typical Use Case Flow

1. User provides a `.jar` or Java package to the MetaFFI CLI.
2. CLI invokes this plugin to extract exposed functions.
3. Plugin loads class metadata and builds IDL.
4. IDL is saved and later used by the runtime plugin to execute Java methods from foreign hosts.

## Summary

This directory implements the **Java IDL plugin**, which generates the MetaFFI IDL JSON from Java source, `.jar`, or compiled classes.

It enables:
- Java to act as a guest language in MetaFFI,
- Other languages (e.g., Python, Go) to locate and call Java methods,
- Proper binding of Java types and method signatures through MetaFFI’s CDTS layer.

(For runtime invocation of IDL-described entities, see `runtime/` and `xllr-openjdk-bridge/`.)


# Java Runtime Plugin (`lang-plugin-openjdk/runtime/`)

This directory implements the **C++ runtime plugin for Java**, adhering to the MetaFFI `runtime_plugin_interface.h`. It is the component that MetaFFI’s core (XLLR) loads when Java is used as a **guest language**.

It is responsible for:
- Initializing and embedding the **JVM**,
- Dynamically resolving Java classes/methods described in the MetaFFI IDL,
- Constructing **XCalls** that invoke Java code via **JNI**,
- Handling data conversion between CDTS and JVM types.

## Architectural Overview

This C++ shared library acts as the official MetaFFI runtime plugin for Java:
- It is dynamically loaded by XLLR via `load_runtime_plugin("openjdk")`.
- Implements all functions required by `runtime_plugin_interface.h`:
  - `load_runtime`, `load_module`, `load_entity`, `call`, `free_entity`, etc.
- Delegates actual JVM operations to the internal **`xllr-openjdk-bridge/`** module.

It does **not directly perform JNI calls**. Instead, it uses the bridge layer as a middleman.

## Core Responsibilities

### 1. **Plugin Interface Implementation**

Implements functions required by MetaFFI:

- `load_runtime(char** err)`:
  - Initializes the JVM if not already running.
  - Loads required bridge symbols.
  - Prepares classpath and JNI environment (delegated to bridge).

- `load_module(const char* module_path, ...)`:
  - Uses bridge logic to prepare class loading from `.jar` or source reference.
  - May cache class/module handles.

- `load_entity(...)`:
  - Resolves a class and method as described in the MetaFFI IDL.
  - Constructs an XCall for it.

- `call(xcall_handle, ...)`:
  - Invokes a bound Java method using the bridge.
  - Converts CDTS args to Java types and marshals return value back.

- `free_entity(...)`, `free_runtime(...)`: 
  - Release resources, references, or cached class/method handles.

These are standard C exports and are resolved by XLLR using `dlsym` or equivalent.

### 2. **Dynamic JVM Embedding and JNI Handling**

- Delegates all JNI and JVM startup logic to the **`xllr-openjdk-bridge/`** directory.
- Provides integration logic and error propagation.
- Handles lifecycle of:
  - `JNIEnv*` context
  - Thread attachment/detachment
  - Exception capture and conversion to MetaFFI-compatible error messages

### 3. **XCall Construction**

- Builds XCall structs for each Java method to be invoked:
  - Assigns `call()` function pointer to a thunk that calls the bridge and then JNI.
  - Stores class/method reference and IDL signature in a closure/context.
  - XCalls are passed back to XLLR, which can use them from any host language.

### 4. **CDTS Conversion Support**

- Converts between MetaFFI CDTS (Common Data Type System) and Java types via:
  - JNI primitives (jint, jboolean, etc.)
  - Java strings, arrays, and object handles
  - Opaque handles (for object references that cross the language boundary)

- The runtime plugin uses helpers from Plugin SDK to handle:
  - CDT memory ownership
  - Dynamic CDT construction from JVM return values
  - Handling opaque CDT references (e.g., wrapping Java objects in a handle table)

### 5. **Bridge Layer Binding**

- Loads bridge methods from `xllr-openjdk-bridge.so` or equivalent.
- All interaction with Java (method call, class lookup, reflection) is delegated to that shared object.
- This design allows the bridge to be developed/tested independently.

## Design Benefits

- **Modularity**: Keeps MetaFFI core integration logic (C++) separate from JVM complexity (bridge).
- **Flexibility**: Can be replaced or extended without changing XLLR or MetaFFI host code.
- **Thread Safety**: Encapsulates JNI environment binding per thread.

## Example Execution Flow

1. `load_runtime("openjdk")` called by XLLR:
   - Initializes JVM via bridge.

2. `load_module("com.example.MyClass")`:
   - Loads class `MyClass` into JVM.

3. `load_entity("com.example.MyClass.myMethod")`:
   - Resolves method signature via reflection.

4. `call(xcall_handle, CDTs...)`:
   - Marshals CDTs to Java arguments via JNI.
   - Invokes the method.
   - Returns CDT result.

5. `free_entity`, `free_runtime` manage cleanup.

## Summary

This directory implements the **MetaFFI runtime plugin for Java**, exposing Java methods to the MetaFFI ecosystem via XCalls and bridging XLLR and the JVM.

It:
- Wraps the JNI layer safely and efficiently.
- Delegates JVM-specific logic to `xllr-openjdk-bridge/`.
- Converts CDTS to/from Java types.
- Exposes callable Java entities as MetaFFI XCalls to any host language.

This plugin is essential for **Java as a guest language**, enabling transparent, reflection-based invocation of Java code from Python, Go, or any other MetaFFI host.

(For actual JNI logic and JVM lifecycle management, see `xllr-openjdk-bridge/`.)


# XLLR–OpenJDK Bridge (`lang-plugin-openjdk/xllr-openjdk-bridge/`)

This directory implements the **C++/JNI bridge** that connects MetaFFI’s runtime plugin (in `runtime/`) to the Java Virtual Machine (JVM). It contains all direct interaction with the **Java Native Interface (JNI)** and is responsible for:

- Starting and managing the embedded JVM,
- Looking up Java classes and methods at runtime,
- Invoking Java methods via JNI,
- Handling Java objects and memory references,
- Mapping Java values to MetaFFI CDTS and vice versa.

This bridge allows MetaFFI to call into Java code using **reflection**, without requiring stub generation.

## Purpose

- Acts as the **runtime executor** for Java guest entities.
- Implements JNI-based reflection, type conversion, and lifecycle management.
- Is linked and called exclusively by the `runtime/` plugin layer, never directly by XLLR.

## Key Responsibilities

### 1. **JVM Initialization and Lifecycle**

- **`jvm_loader.cpp/h`**:
  - Starts the JVM via `JNI_CreateJavaVM(...)` if not already initialized.
  - Accepts JVM options such as classpath, memory settings, or debugging flags.
  - Ensures only one JVM instance is created (singleton).
  - Detects already-running JVMs when loaded in-process (e.g., if Java host is already running).

- **`jvm_context.cpp/h`**:
  - Manages `JNIEnv*` per thread.
  - Ensures correct **thread attachment** and **detachment** to the JVM.
  - Prevents illegal thread access to JVM functions (each C++ thread must be attached via JNI).

### 2. **Reflection and Symbol Resolution**

- **`class_loader.cpp/h`**:
  - Loads Java classes dynamically via `FindClass`.
  - Resolves method/constructor IDs using `GetMethodID` or `GetStaticMethodID` based on IDL.
  - Supports:
    - Instance and static methods,
    - Overloads (via parameter signature resolution),
    - Constructors and object instantiation.

- **`java_method.cpp/h`**:
  - Encapsulates metadata and references for a Java method.
  - Stores:
    - Method ID,
    - Declaring class,
    - Static vs. instance indicator,
    - Signature info.

### 3. **Invocation and CDTS Interop**

- **`java_invoker.cpp/h`**:
  - Converts input CDTs → JNI-compatible arguments.
  - Invokes methods via `Call<Type>Method[A]` / `CallStatic<Type>Method[A]`.
  - Handles return value conversion to CDTS.
  - Manages exceptions via `ExceptionCheck()` and propagates them back to MetaFFI as error strings.

- **`cdts_java_converter.cpp/h`**:
  - Handles bidirectional translation:
    - Java primitive → CDT primitive,
    - Java String ↔ `cdt_string`,
    - Java arrays ↔ `cdt_array`,
    - Java objects ↔ `cdt_opaque` (object handles).

  - Manages:
    - CDT memory ownership,
    - Java references (local/global),
    - Opaque handle registration (e.g., objects stored in table).

- **`cdts_object_registry.cpp/h`**:
  - Maintains a **Java object table**, mapping CDT opaque handles to `jobject` references.
  - Ensures identity preservation of Java objects across calls.
  - Provides lookup, reference management, and cleanup routines.

### 4. **Exception Handling**

- All JNI errors or Java exceptions are:
  - Caught using `ExceptionOccurred()`,
  - Described (via `toString()` or `getMessage()`),
  - Cleared with `ExceptionClear()`,
  - Returned to the C++ runtime plugin as a `char** err`.

Ensures proper error propagation back to MetaFFI host (e.g., Python catching a Java exception).

### 5. **Build Integration and Modularity**

- This directory compiles into a shared library (e.g., `xllr_openjdk_bridge.so` or `.dll`) which is:
  - Dynamically loaded by `runtime/`,
  - Linked via explicit symbol lookup or static linkage.

- Allows MetaFFI to:
  - Cleanly separate JNI and JVM logic from plugin orchestration,
  - Reuse bridge in other tools (e.g., CLI or host compilers),
  - Extend or replace without altering XLLR or host-facing code.

## Example Call Flow

1. A foreign host (e.g., Python) wants to call `MyClass.hello()` in Java.
2. XLLR delegates to the Java runtime plugin (`runtime/`).
3. `runtime/` uses this bridge to:
   - Load `MyClass`,
   - Resolve `hello()` method,
   - Prepare arguments from CDTs,
   - Invoke the method,
   - Receive a return value (or exception),
   - Convert back to CDTS and return to host.

## Summary

This directory is the **heart of Java runtime integration for MetaFFI**. It performs all direct communication with the JVM using JNI, while maintaining clean separation from MetaFFI’s C/C++ layers.

Its responsibilities include:
- **Starting and managing the JVM**,
- **Loading classes and resolving methods dynamically**,
- **Calling Java code via JNI**,
- **Marshalling arguments and return values between CDTS and Java**,
- **Handling Java objects and errors across language boundaries**.

It enables MetaFFI to support Java as a guest without requiring any source code changes or wrapper generation — a fully reflective, runtime-based integration.

(For the plugin interface exposed to MetaFFI core, see `runtime/`; for how this plugin is discovered and loaded, see root `CMakeLists.txt`.)
