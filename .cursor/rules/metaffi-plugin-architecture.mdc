---
description: get information about programming language plugin implementation
alwaysApply: false
---
# MetaFFI Plugin Architecture Overview

MetaFFI’s **plugin-based architecture** enables seamless interoperability between multiple programming languages by defining a standard structure for language support. Each language is integrated via a set of plugins and API modules, which bridge the language’s runtime with MetaFFI’s core (the Cross-Language Linker Runtime, or XLLR). This modular, hub-and-spoke design simplifies integration: to add support for a new language, only a single plugin (or set of plugins) must be written for that language, rather than creating pairwise bridges between languages.

---

## Components Required for Language Support

To support a new language in MetaFFI, the following components are typically implemented:

### 1. **Runtime Plugin (mandatory)**
- **Purpose:** Embeds or interfaces with the target language’s runtime. This is a native library (often C/C++ with language-specific parts) that implements the `runtime_plugin_interface` (`plugin-sdk/runtime/runtime_plugin_api.h`).
- **Responsibilities:**
  - Load/unload the language runtime (e.g., start a JVM, initialize Python interpreter, etc.).
  - Load foreign code entities (modules, classes, functions) from the target language.
  - Create and return **XCall** handles—opaque function pointers and context structs that allow MetaFFI to invoke foreign entities in a language-neutral way.
  - Manage memory and objects, often using **opaque handles** to pass complex objects across languages without conversion.
- **Examples:** `lang-plugin-python311/runtime`, `lang-plugin-go/runtime`, `lang-plugin-openjdk/runtime`.
- **Loaded By:** XLLR at runtime (`load_runtime_plugin("language_name")`).

### 2. **Interface Definition Language (IDL) Plugin (mandatory for compile-time integration)**
- **Purpose:** Auto-generates MetaFFI IDL (a JSON-based, language-agnostic interface definition) from source code or binaries. Implements `idl_plugin_interface.h` and is invoked by the MetaFFI CLI.
- **Responsibilities:**
  - Parse language APIs (source files, binaries, etc.) and output a MetaFFI IDL JSON that describes functions, classes, types, and parameters in a uniform way.
  - Enables automation of interface metadata extraction (no manual writing).
- **Examples:** `lang-plugin-go/idl`, `lang-plugin-openjdk/idl`.

### 3. **Compiler Plugin (conditional)**
- **Purpose:** Generates glue code to enable calling foreign entities from C or to provide host-side wrappers. Implements `language_plugin_interface.h` (usually in Go, using `plugin-sdk/compiler/go/`).
- **Responsibilities:**
  - **Guest Compiler:** (mandatory if the target language requires explicit C entrypoints) Generates code that exposes the target language’s functions with C-accessible symbols (e.g., Go or Rust require this).
  - **Host Compiler:** (optional) Generates host-side wrappers for convenience and type safety in the host language.
- **Examples:** `lang-plugin-go/compiler`
- **Notes:** Not required for languages like Python or Java, whose C APIs allow dynamic loading/invocation.

### 4. **API Module (mandatory for host usage)**
- **Purpose:** Provides a high-level, language-specific API for developers to interact with MetaFFI, abstracting away C FFI details.
- **Responsibilities:**
  - Load/unload runtimes, load modules, and invoke foreign functions in the host language’s natural syntax.
  - Exposes the MetaFFI API as a library or package (e.g., Python package on PyPI, Go module, Java JAR).
- **Examples:** `lang-plugin-python311/api`, `lang-plugin-go/api`, `lang-plugin-openjdk/api`.
- **Notes:** Not a plugin loaded by XLLR, but a standard library for the host language.

---


## Common Directory Structure
```
plugin-root/
├── api/              # Language-specific API wrapper
│   └── tests/        # E2E tests with other plugins
├── compiler/         # Code generation for C entrypoints
├── idl/             # Interface definitions
├── plugin-sdk/      # Plugin SDK - common modules across metaffi-core and all plugins
├── runtime/         # Runtime implementation
└── [additional]/    # Additional Language-specific components as required
```


---

## Plugin SDK

Every plugin includes a `plugin-sdk` directory containing:
- Common interfaces and helper functions (e.g., for C↔language data conversion).
- Standardized integration points and documentation for plugin development.
- Data structures and utilities for manipulating MetaFFI IDL.

---

## Key Concepts

- **XCall Abstraction:** MetaFFI represents all foreign function calls as XCall handles (C function pointer + context). These allow MetaFFI’s core to call into any language using a uniform mechanism, regardless of the language’s calling convention or object model.
- **Common Data Types System (CDTS):** All plugins convert their language’s data types to/from CDTS types when passing parameters/returns. CDTS supports common primitives and opaque handles for complex objects, ensuring data integrity and reference semantics across language boundaries.
- **Cross-Language Linker Runtime (XLLR):** MetaFFI’s in-process hub loads runtime plugins, orchestrates module loading, and dispatches cross-language calls. Provides shared memory management and thread-safety.

---

## Development Guidelines

1. All plugins must implement the runtime component.
2. Compiler and IDL plugins are required for languages that need explicit C entrypoints.
3. API modules should include comprehensive test coverage (see `api/tests/`).
4. Document additional components in the plugin’s README.
5. All components should adhere to MetaFFI coding standards and export required C functions.

---

## Exported C-Functions

All MetaFFI plugin interfaces are implemented as C-exported functions within dynamic libraries, following the function signatures defined in the plugin SDK headers.

---

## Adding a New Language

To add support for a new language *L*:
- Implement the API module for host usage.
- Implement the runtime plugin to allow *L* to act as a guest.
- Add IDL and compiler plugins if *L* requires C entrypoints.
- Follow the standard directory layout and use the plugin SDK for maximum compatibility.

---

**Summary:**  
MetaFFI’s plugin architecture divides responsibilities among core (XLLR), plugins (runtime, IDL, compiler), and APIs (host usage), ensuring clean separation of concerns. Every cross-language call in MetaFFI follows the same pathway: Host API → XLLR → Guest runtime plugin → target function, with all data passed via CDTS. This system enables robust, indirect interoperability across all supported languages by adding a single plugin per language, not per language-pair.

