---
description: get information about Go language support (lang-plugin-go)
alwaysApply: false
---
# Go Language Plugin (lang-plugin-go)

The Go plugin enables MetaFFI to interoperate with Go code. It allows Go programs to call foreign functions (Go as a **host** language) and also allows other languages to call Go functions (Go as a **guest** language). The `lang-plugin-go` directory contains all the components specific to Go:

- **api/** – The Go API package for MetaFFI (host-side usage).
- **runtime/** – The core runtime plugin implementation for Go, largely in C/C++ (bridging XLLR to the Go runtime).
- **go-runtime/** – Additional Go code that works with the runtime plugin (this helps manage Go’s runtime and types).
- **idl/** – The IDL plugin for Go, which can scan Go source code to produce MetaFFI’s IDL definitions for Go entities.
- **compiler/** – The compiler plugin for Go, responsible for generating any necessary wrapper code (especially for Go as guest) and optional host stubs.
- **api/tests/** – End-to-end tests where Go is the host language, calling into other language guests (Python, Java, etc.).

These subcomponents align with MetaFFI’s plugin architecture (see *Plugin Architecture prompt*). Notably, the Go plugin is one of the more complex plugins because Go’s runtime has specific requirements for interoperability (for example, Go functions must be exported with special directives to be callable from C).

**Go as Guest (Callable from other languages):** When other languages need to call Go functions, the Go plugin’s runtime and compiler work together:
  - The **IDL plugin** can analyze Go code to find exported functions, methods, and types (so the user doesn’t have to manually list them).
  - The **Guest compiler** is **mandatory for Go**:contentReference[oaicite:25]{index=25} because Go doesn’t natively support reflective invocation from C. The compiler plugin uses the IDL output to generate Go wrapper code. Specifically, it creates Go functions with `//export` comments (using cgo) that call the actual Go code. These exported functions become C-callable entry points. The compiler then compiles this into a shared library (e.g., `MetaFFIGuest.so` on Linux or `MetaFFIGuest.dll` on Windows) which exposes Go functionality via a C interface.
  - The **runtime plugin** (C++ part) then loads this generated Go guest library at runtime. It uses the **Plugin SDK’s** loading utilities to `dlopen`/`LoadLibrary` the Go-compiled shared library and retrieves the function pointers (XCall) for each exported function.
  - At runtime, when an entity is loaded, the plugin essentially gives XLLR a function pointer that points into the Go shared library. When called, that goes into the Go runtime and executes the target Go function. The plugin also handles converting arguments/results via CDTS (e.g., marshalling Go’s types to CDTS and vice versa).

**Go as Host (Calling foreign code from Go):** The Go API (`api/` package) allows Go programs to act as the host:
  - It wraps the MetaFFI core’s C API using cgo. For example, it provides functions like `MetaFFI_LoadRuntime("python3")` or similar, which internally call `xllr_load_runtime_plugin` for Python.
  - The API helps convert Go values to the CDTS so they can be passed to foreign calls, and converts returned CDTs back to Go types. For complex types or objects coming from foreign languages, the API might represent them as an opaque `MetaFFIHandle` type in Go (essentially a pointer with no specific type that can be passed back to the foreign side or used in subsequent calls).
  - The Go host compiler (optional) is implemented to improve usability: it can auto-generate Go stub functions/types for foreign libraries. For instance, if using a large Python library in Go, the host compiler could produce Go functions that directly call into that library’s functions via MetaFFI. This spares the developer from manually handling CDTS for every call. The host compiler uses IDL (extracted from the foreign library) to generate these Go stubs.

**Memory and Objects:** The Go plugin must manage Go objects across language boundaries carefully. For example, if a Go function returns a Go struct or a pointer to a Go object, you can’t directly use that in Python/Java. The plugin likely uses an **object table** (see `objects_table.*` in runtime and `ObjectsTable.go` in go-runtime) to store references to Go objects and assign each a handle (perhaps an integer or pointer). When passing to another language, it actually passes a CDT of type “opaque” with that handle. Later, if the foreign side passes it back or calls a method on it, the plugin can look it up in the table to get the real Go object.

**Division of Labor – C++ vs Go Code:** The `lang-plugin-go` plugin is implemented in a hybrid way:
  - The **C++ portion (`runtime/` folder)** compiles into the actual runtime plugin library that XLLR will load (e.g., `metaffi_go_runtime.dll` or `.so`). This C++ code implements the `runtime_plugin_interface`. It likely handles integration points like `load_runtime` (possibly initializing a Go runtime environment or ensuring the Go shared libs are ready) and especially the low-level interfacing with XLLR and memory allocation.
  - The **Go portion (`go-runtime/` folder)** is compiled into a Go library (or included as part of the plugin via cgo). It contains Go-specific logic that is easier to do in Go than in C++. For instance:
    - Converting CDTS to Go native types and vice versa (file `CDT.go` and others in `go-runtime` implement this).
    - Traversing nested structures: `TraverseConstruct.go` and `TraverseConstructCallbacks.go` likely contain code to recursively construct Go arrays/slices or maps from CDTS recursively, and to break down Go structures into CDTS on the way out.
    - Managing the Go runtime’s peculiarities (ensuring the Go scheduler and GC are aware of the foreign threads calling in, etc.). Some of this might involve calling Go runtime functions via the Cgo interface.
    - The `XLLRAccessor.go` and `MetaFFIGoHostCommon.go` suggest that the Go code can call back into XLLR or common routines. For example, `XLLRAccessor` might wrap calls to XLLR’s `xllr_*` functions so the Go side can invoke them if needed (though mostly the direction is C++ calling Go).
  - These two parts communicate through cgo. The C++ code can call Go functions that are exported with `extern "C"` by the Go code (using cgo //export directives). Conversely, the Go code can call C functions provided by the C++ side or by XLLR (the `import "C"` in `init.go` and use of `C.load_xllr()` indicates the Go code is calling into the C side to load XLLR symbols).
  
In essence, the **Go plugin runtime** is split: **C++** for the plugin interface and dynamic loading, **Go** for heavy lifting in type conversion and runtime interaction. This design leverages each language’s strengths: Go code to handle Go’s reflection or runtime APIs, and C++ to fit into MetaFFI’s plugin framework.

**Testing (api/tests/):** The Go plugin’s tests cover using Go as a host:
  - **Sanity tests:** Simple scenarios, e.g., calling a basic Python function or a basic Java method from Go, ensuring the pipeline works (located in `api/tests/sanity/`).
  - **Extended tests:** More complex integrations. The Go tests demonstrate Go calling into Python’s libraries (like using BeautifulSoup in Python, or testing complex data types round-trip with Python) and calling into Java (e.g., initializing Log4j in Java from Go). These are found in `api/tests/extended/`. For example, the *BeautifulSoupTest.go* calls a Python function that uses the BeautifulSoup library, and the *Log4j.go* test calls Java’s Log4j logger. The tests verify that:
    - Data passed from Go to Python/Java (and back) remains intact (including strings, arrays, maps, and even user-defined objects via handles).
    - Exceptions or errors are properly propagated (the API likely captures foreign exceptions and represents them in Go, perhaps as an `error`).
    - Resource management is correct (no leaks or double frees, and foreign runtimes can initialize/shutdown properly).

**Summary:** The Go plugin is one of MetaFFI’s reference implementations for a systems language:
- It demonstrates how to handle a language that **requires generated C stubs** for invocation (through its compiler plugin).
- It shows a hybrid plugin implementation (C++ and native code) to meet all needs.
- With this plugin, a Go developer can, for instance, import the `metaffi` Go package, call `metaffi.LoadRuntime("python3")`, load a Python module and call its functions as if they were Go functions. Conversely, a Python or Java developer can call compiled Go functions via MetaFFI by first loading the Go runtime plugin and the Go module.

This plugin makes it possible to integrate Go code into multi-language applications using MetaFFI’s unified approach. (For more details on specific subdirectories, see the prompts for `lang-plugin-go/api`, `compiler`, `idl`, etc.)
# Go Language Plugin (lang-plugin-go)

The Go plugin enables MetaFFI to interoperate with Go code. It allows Go programs to call foreign functions (Go as a **host** language) and also allows other languages to call Go functions (Go as a **guest** language). The `lang-plugin-go` directory contains all the components specific to Go:

- **api/** – The Go API package for MetaFFI (host-side usage).
- **runtime/** – The core runtime plugin implementation for Go, largely in C/C++ (bridging XLLR to the Go runtime).
- **go-runtime/** – Additional Go code that works with the runtime plugin (this helps manage Go’s runtime and types).
- **idl/** – The IDL plugin for Go, which can scan Go source code to produce MetaFFI’s IDL definitions for Go entities.
- **compiler/** – The compiler plugin for Go, responsible for generating any necessary wrapper code (especially for Go as guest) and optional host stubs.
- **api/tests/** – End-to-end tests where Go is the host language, calling into other language guests (Python, Java, etc.).

These subcomponents align with MetaFFI’s plugin architecture (see *Plugin Architecture prompt*). Notably, the Go plugin is one of the more complex plugins because Go’s runtime has specific requirements for interoperability (for example, Go functions must be exported with special directives to be callable from C).

**Go as Guest (Callable from other languages):** When other languages need to call Go functions, the Go plugin’s runtime and compiler work together:
  - The **IDL plugin** can analyze Go code to find exported functions, methods, and types (so the user doesn’t have to manually list them).
  - The **Guest compiler** is **mandatory for Go**:contentReference[oaicite:25]{index=25} because Go doesn’t natively support reflective invocation from C. The compiler plugin uses the IDL output to generate Go wrapper code. Specifically, it creates Go functions with `//export` comments (using cgo) that call the actual Go code. These exported functions become C-callable entry points. The compiler then compiles this into a shared library (e.g., `MetaFFIGuest.so` on Linux or `MetaFFIGuest.dll` on Windows) which exposes Go functionality via a C interface.
  - The **runtime plugin** (C++ part) then loads this generated Go guest library at runtime. It uses the **Plugin SDK’s** loading utilities to `dlopen`/`LoadLibrary` the Go-compiled shared library and retrieves the function pointers (XCall) for each exported function.
  - At runtime, when an entity is loaded, the plugin essentially gives XLLR a function pointer that points into the Go shared library. When called, that goes into the Go runtime and executes the target Go function. The plugin also handles converting arguments/results via CDTS (e.g., marshalling Go’s types to CDTS and vice versa).

**Go as Host (Calling foreign code from Go):** The Go API (`api/` package) allows Go programs to act as the host:
  - It wraps the MetaFFI core’s C API using cgo. For example, it provides functions like `MetaFFI_LoadRuntime("python3")` or similar, which internally call `xllr_load_runtime_plugin` for Python.
  - The API helps convert Go values to the CDTS so they can be passed to foreign calls, and converts returned CDTs back to Go types. For complex types or objects coming from foreign languages, the API might represent them as an opaque `MetaFFIHandle` type in Go (essentially a pointer with no specific type that can be passed back to the foreign side or used in subsequent calls).
  - The Go host compiler (optional) is implemented to improve usability: it can auto-generate Go stub functions/types for foreign libraries. For instance, if using a large Python library in Go, the host compiler could produce Go functions that directly call into that library’s functions via MetaFFI. This spares the developer from manually handling CDTS for every call. The host compiler uses IDL (extracted from the foreign library) to generate these Go stubs.

**Memory and Objects:** The Go plugin must manage Go objects across language boundaries carefully. For example, if a Go function returns a Go struct or a pointer to a Go object, you can’t directly use that in Python/Java. The plugin likely uses an **object table** (see `objects_table.*` in runtime and `ObjectsTable.go` in go-runtime) to store references to Go objects and assign each a handle (perhaps an integer or pointer). When passing to another language, it actually passes a CDT of type “opaque” with that handle. Later, if the foreign side passes it back or calls a method on it, the plugin can look it up in the table to get the real Go object.

**Division of Labor – C++ vs Go Code:** The `lang-plugin-go` plugin is implemented in a hybrid way:
  - The **C++ portion (`runtime/` folder)** compiles into the actual runtime plugin library that XLLR will load (e.g., `metaffi_go_runtime.dll` or `.so`). This C++ code implements the `runtime_plugin_interface`. It likely handles integration points like `load_runtime` (possibly initializing a Go runtime environment or ensuring the Go shared libs are ready) and especially the low-level interfacing with XLLR and memory allocation.
  - The **Go portion (`go-runtime/` folder)** is compiled into a Go library (or included as part of the plugin via cgo). It contains Go-specific logic that is easier to do in Go than in C++. For instance:
    - Converting CDTS to Go native types and vice versa (file `CDT.go` and others in `go-runtime` implement this).
    - Traversing nested structures: `TraverseConstruct.go` and `TraverseConstructCallbacks.go` likely contain code to recursively construct Go arrays/slices or maps from CDTS recursively, and to break down Go structures into CDTS on the way out.
    - Managing the Go runtime’s peculiarities (ensuring the Go scheduler and GC are aware of the foreign threads calling in, etc.). Some of this might involve calling Go runtime functions via the Cgo interface.
    - The `XLLRAccessor.go` and `MetaFFIGoHostCommon.go` suggest that the Go code can call back into XLLR or common routines. For example, `XLLRAccessor` might wrap calls to XLLR’s `xllr_*` functions so the Go side can invoke them if needed (though mostly the direction is C++ calling Go).
  - These two parts communicate through cgo. The C++ code can call Go functions that are exported with `extern "C"` by the Go code (using cgo //export directives). Conversely, the Go code can call C functions provided by the C++ side or by XLLR (the `import "C"` in `init.go` and use of `C.load_xllr()` indicates the Go code is calling into the C side to load XLLR symbols).
  
In essence, the **Go plugin runtime** is split: **C++** for the plugin interface and dynamic loading, **Go** for heavy lifting in type conversion and runtime interaction. This design leverages each language’s strengths: Go code to handle Go’s reflection or runtime APIs, and C++ to fit into MetaFFI’s plugin framework.

**Testing (api/tests/):** The Go plugin’s tests cover using Go as a host:
  - **Sanity tests:** Simple scenarios, e.g., calling a basic Python function or a basic Java method from Go, ensuring the pipeline works (located in `api/tests/sanity/`).
  - **Extended tests:** More complex integrations. The Go tests demonstrate Go calling into Python’s libraries (like using BeautifulSoup in Python, or testing complex data types round-trip with Python) and calling into Java (e.g., initializing Log4j in Java from Go). These are found in `api/tests/extended/`. For example, the *BeautifulSoupTest.go* calls a Python function that uses the BeautifulSoup library, and the *Log4j.go* test calls Java’s Log4j logger. The tests verify that:
    - Data passed from Go to Python/Java (and back) remains intact (including strings, arrays, maps, and even user-defined objects via handles).
    - Exceptions or errors are properly propagated (the API likely captures foreign exceptions and represents them in Go, perhaps as an `error`).
    - Resource management is correct (no leaks or double frees, and foreign runtimes can initialize/shutdown properly).

**Summary:** The Go plugin is one of MetaFFI’s reference implementations for a systems language:
- It demonstrates how to handle a language that **requires generated C stubs** for invocation (through its compiler plugin).
- It shows a hybrid plugin implementation (C++ and native code) to meet all needs.
- With this plugin, a Go developer can, for instance, import the `metaffi` Go package, call `metaffi.LoadRuntime("python3")`, load a Python module and call its functions as if they were Go functions. Conversely, a Python or Java developer can call compiled Go functions via MetaFFI by first loading the Go runtime plugin and the Go module.

This plugin makes it possible to integrate Go code into multi-language applications using MetaFFI’s unified approach. (For more details on specific subdirectories, see the prompts for `lang-plugin-go/api`, `compiler`, `idl`, etc.)


# Go Runtime Integration Layer (`lang-plugin-go/go-runtime/`)

This directory contains **Go-side runtime logic** that supports the Go language plugin at execution time. It complements the C++-based `runtime/` directory and handles the parts of MetaFFI’s runtime integration that require native Go capabilities.

## Purpose

- Implements runtime services and glue logic for Go when it is used as a **guest** language (i.e., being called by another host language).
- Bridges the **MetaFFI C++ plugin runtime** with the **Go runtime**, enabling data exchange, function dispatch, and memory management from foreign hosts into Go code.
- Handles **CDTS <-> Go native** type conversion in both directions.
- Manages the lifecycle of Go objects referenced from other languages using **opaque handles**.

## Architectural Role

- This is not a standalone plugin. Instead, it is built into the shared library produced by the Go compiler plugin or linked with the runtime plugin via `cgo`.
- It works closely with `lang-plugin-go/runtime/` (C++ layer), exporting `extern "C"` functions using `//export` directives, so that the C++ side can invoke Go code.

## Core Components

### 1. **CDTS Conversion Logic**

- **`CDT.go`**:
  - Defines functions to **convert MetaFFI CDTs into Go values** (e.g., CDT with tag `int64` → `int64` in Go).
  - Also converts Go values to CDTs (e.g., `map[string]string` → CDT map).
  - Handles edge cases like `nil`, complex nesting, and error propagation.

- **`TraverseConstruct.go` & `TraverseConstructCallbacks.go`**:
  - Recursive traversals for deep structures (nested lists, maps, objects).
  - Includes callbacks or visitor-style logic to walk CDTs and construct corresponding Go values or vice versa.
  - Ensures consistency in layout when crossing language boundaries.

This system enables Go functions to **receive foreign parameters and return results** correctly, even when complex types are involved.

### 2. **Object and Handle Management**

- **`ObjectsTable.go`**:
  - Stores Go objects in an internal map with unique opaque handles (e.g., UUIDs or incrementing integers).
  - Provides lookup, registration, and disposal mechanisms.
  - Enables foreign code to store a Go object handle (as a CDT “opaque”) and pass it back later for further calls.

- **Object lifecycle management** is critical to avoid dangling pointers or memory leaks when working across GC and non-GC runtimes.

### 3. **XLLR Access and Bootstrapping**

- **`XLLRAccessor.go`**:
  - Allows Go code to **call into the MetaFFI core (XLLR)**, if needed.
  - Dynamically loads function pointers from `xllr.dll` or `libxllr.so` and exposes them as Go-callable functions via `cgo`.
  - Functions like `XLLRLoadRuntime`, `XLLRMakeCallable`, etc., are re-exposed to Go.

- This enables advanced usage where Go code acts as both host and guest or wants to delegate to XLLR explicitly (e.g., during function resolution).

### 4. **Plugin Initialization and Runtime Entrypoint**

- **`init.go`**:
  - Registers exported symbols (e.g., `ExportedGoFunction`) via `//export` for C to call.
  - Initializes internal tables, CDTS handlers, or runtime structures.
  - Ensures thread-safe initialization of the Go runtime (important when called from C threads).
  
- **Entrypoint functions**: When MetaFFI loads a Go guest module, it calls functions in this package (e.g., via `dlopen` + `GetProcAddress` for symbols like `MyFunction_exported`), which dispatch into this Go code.

### 5. **Helper Files**

- **`MetaFFIGoHostCommon.go`**:
  - Shared code between the API and runtime plugin (likely includes host-independent utilities).
  - May contain generic CDTS helpers, runtime error formatting, or reflection helpers.

- **`stringutils.go`**, `MetaFFIHandle.go`:
  - Utility functions for string conversion, handle manipulation, etc.
  - May include helpers for converting between Go strings and C strings for use in `cgo`.

## Integration

- The code in this directory is compiled as part of the **guest plugin shared object** (via the Go compiler plugin).
- The **C++ runtime plugin** (`runtime/`) calls into these functions using `extern "C"` linkage (enabled via `//export`).
- Go runtime code never directly calls the C++ code — instead, all communication is initiated from C (XLLR → plugin runtime C++ → Go via `cgo`).

## Summary

This directory is the **Go-native layer of the runtime plugin**. It handles all the operations that require access to the Go type system, reflection, runtime internals, and memory model. By delegating the core plugin interface to C++ (`runtime/`) and offloading Go-native logic here, the architecture maintains clean separation of concerns.

Any future enhancements to Go’s plugin behavior (e.g., new types, host callbacks, extended reflection) would typically be implemented here.

(For glue logic with MetaFFI’s runtime interface, see `lang-plugin-go/runtime/`.)


# Go Runtime Plugin (`lang-plugin-go/runtime/`)

This directory contains the **C++ implementation of the MetaFFI runtime plugin for Go**. It provides the bridge between MetaFFI’s core (XLLR) and the native Go runtime layer (`go-runtime/`), enabling foreign languages to call into Go code via standardized XCall interfaces.

## Purpose

- Implements the **runtime plugin interface** (`runtime_plugin_interface.h`) for the Go language.
- Enables XLLR to:
  - Load Go shared libraries generated from Go code.
  - Load Go entities (functions, methods, etc.) using MetaFFI IDL.
  - Construct **XCalls** that invoke Go functions.
  - Marshal arguments and results via CDTS.
- Acts as the **entrypoint for MetaFFI → Go interoperability**, facilitating calls from any language into Go.

## Architecture

This component is a shared C++ library (`metaffi_go_runtime.so/.dll`) that is loaded by XLLR when the user calls `load_runtime_plugin("go")`.

Internally, it uses `dlopen` / `LoadLibrary` to load the Go-compiled guest modules, and uses `dlsym` / `GetProcAddress` to bind exported symbols. Then, it maps MetaFFI XCalls to those symbols and manages data conversions.

## Core Responsibilities

### 1. **Plugin Interface Implementation**

- Implements required C entrypoints from `runtime_plugin_interface.h`:
  - `load_runtime`, `free_runtime`
  - `load_module`
  - `load_function`, `get_entity`, `call`
  - `free_entity`, etc.

These functions are exported from this shared object, and are discovered and invoked by XLLR dynamically at runtime. They define how MetaFFI calls into Go libraries.

### 2. **Dynamic Linking of Go Guest Modules**

- **`function_loader.hpp`**, **`library_loader.cpp/h`**:
  - Utilities to load the Go-compiled `.so/.dll` guest module generated by the Go compiler plugin.
  - Uses platform-specific dynamic linking (e.g., `dlopen`, `LoadLibrary`) to bind exported symbols.
  - Validates symbols match those described in the IDL.

The Go compiler plugin generates symbols like `MyFunction_exported`. This runtime plugin must locate and bind these C-callable Go stubs.

### 3. **XCall Construction**

- Constructs an `xcall` structure for each function described in the IDL:
  - Function pointer (`xcall.call`)
  - Context (if needed)
  - Destructor
  - Call signature metadata
- Uses the **plugin SDK’s utilities** to wrap these symbols into valid XCalls.
- These XCalls are then returned to XLLR, which can invoke them on behalf of any host language.

### 4. **CDTS Integration**

- Uses SDK components (`cdts_wrapper`, `cdts_traverse_construct`, etc.) to:
  - Receive CDTS input values from XLLR.
  - Pass them into Go functions (via calls into `go-runtime/` layer).
  - Convert Go return values back to CDTS.
  
CDTS support includes primitive types, arrays, maps, and opaque object handles.

### 5. **Objects Table and Opaque Handle Management**

- **`objects_table.cpp/h`**:
  - Maintains a table of Go objects returned to or received from foreign code.
  - Associates opaque `void*` handles with reference-counted Go-side objects (accessed via `go-runtime/`).
  - Ensures memory is managed correctly, and prevents use-after-free bugs.

This enables persistent references to Go objects from foreign code.

### 6. **Error Propagation and Diagnostics**

- Wraps Go function calls with error trapping and propagation.
- If Go code panics or returns a known error, the runtime plugin catches it and returns a formatted C error string back to XLLR (via `char** err`).
- Uses SDK functions for consistent memory allocation of error messages across DLL boundaries (`xllr_malloc`, `xllr_free`).

### 7. **Glue to Go Runtime Layer**

- Calls into Go functions using `extern "C"` symbols declared with `//export` in `go-runtime/`.
- Uses `cgo`-compatible function calls such as:
```cpp
extern "C" void ExportedGoFunction(CDT* args, CDT* ret, char** err);
```

- Manages interop boundaries: converts CDTS values, invokes the Go symbol, captures result or error, and returns.

The division of labor is:
- C++ layer handles MetaFFI/XLLR integration, XCall construction, and dynamic linking.
- Go layer handles actual function execution and native type manipulation.

### 8. Initialization and Bootstrapping
- init.cpp sets up internal plugin state, may load required Go runtime libraries, and prepares symbol lookup paths.
- Ensures that all plugin functions are registered and ready for use when XLLR loads the plugin.

This code may use environment variables, plugin_sdk/expand_env, or hardcoded conventions to locate compiled Go guest libraries.

## Summary
This directory contains the C++ entrypoint for MetaFFI → Go integration. It adheres strictly to the MetaFFI runtime plugin interface and focuses on:

- Conforming to MetaFFI’s plugin contract.
- Dynamic loading of Go-compiled guests.
- Calling Go via exported C symbols.
- Translating between CDTS and native types.
- Managing object lifetimes and opaque references.

It does not contain Go logic itself — that lives in go-runtime/. Instead, it acts as the glue between XLLR (C) and Go (via cgo). This split allows clean abstraction and better type safety in each language.

When calling Go from any MetaFFI host (e.g., Java or Python), this runtime plugin is the first component invoked to resolve and execute the target function.

(For the associated Go logic, see go-runtime/; for code generation of these guest modules, see compiler/.)



# Go IDL Plugin (`lang-plugin-go/idl/`)

This directory implements the **IDL plugin** for Go. Its responsibility is to extract public entities (functions, types, methods, etc.) from Go source code or packages and translate them into the **MetaFFI IDL format**, which is a structured, language-agnostic JSON representation of a module's interface.

## Purpose

- Enables **automatic interface discovery** for Go code.
- Transforms Go packages or files into **MetaFFI IDL**, which is then used by:
  - The MetaFFI **compiler plugin** to generate glue code (e.g., guest wrappers).
  - MetaFFI **CLI tools** to compile/link foreign entities into the MetaFFI runtime.
- Makes it possible to use existing Go code in MetaFFI without manual interface definition.

## Architectural Role

The IDL plugin is **invoked at compile-time** (not runtime). It is typically called via the MetaFFI CLI when the user issues a command like:

```bash
metaffi idl --lang=go --input ./my_go_module/ --output ./output.idl.json
```

This plugin analyzes the provided Go code and emits a .json file describing the exported functions, parameters, types, and other metadata in MetaFFI IDL format.

## Core Components

### 1. Plugin Entrypoint
- Implements the standard MetaFFI plugin interface:
  - The plugin exports a C-callable function matching idl_plugin_interface.h (via cgo + Go).
  - Likely named something like generate_idl() (wrapped in Go via plugin-sdk/compiler/go tools).
- Entrypoint is exposed in the shared library compiled from this package.
- Registered and dynamically loaded by MetaFFI’s CLI or other tooling.

### 2. Go Code Parsing & Analysis
- Uses Go’s standard packages (`go/parser`, `go/ast`, `go/token`, etc.) to:
  - Parse input Go source files, packages, or modules
    - Traverse the abstract syntax tree (AST) to find:
      - Exported functions
      - Public structs/types
      - Method receivers
      - Argument and return type signatures
    - Extracted entities are represented in Go structs compatible with MetaFFI IDL (via `plugin-sdk/compiler/go/IDL/`).
    - The parser understands:
      - Type aliases, pointers, slices, maps
      - Function signatures with multiple return values
      - Receiver methods on structs (for object-style invocation)
    - AST traversal is robust and tuned for MetaFFI use case: finding only what is usable across FFI boundaries.

### 3. IDL Construction
- After parsing, the plugin builds an in-memory representation of the MetaFFI IDL:
  - Uses the Go struct definitions from plugin-sdk/compiler/go/IDL/ (IDLDefinition, FunctionDefinition, ClassDefinition, etc.).
  - Fills in fields like:
    - `name`, `parameters`, `return_types`, `is_static`, `receiver_type`, etc.
    - Handles language-specific mapping to MetaFFI CDTS types (e.g., `int` → `cdt_int64`, `string` → `cdt_string`).
  - May include module-wide metadata (version, dependencies, etc.).

### 4. IDL Output Serialization
- Serializes the final in-memory IDL structure to a JSON file.
- This JSON conforms to MetaFFI’s schema (see plugin-sdk/compiler/go/IDL/schema.json).
- Output can then be consumed by the compiler plugin or CLI to continue the build process.

### 5. Error Reporting & Debugging
- Implements robust error handling:
  - Reports malformed Go code or unsupported constructs.
  - Detects ambiguous function names, type mismatches, or inaccessible symbols.
- May include logging or debug flags to output intermediate AST or IDL structures for troubleshooting.

### 6. Dependencies
- Likely imports:
  - go/types for type resolution
  - go/doc for optional docstring parsing
  - Internal packages like plugin-sdk/compiler/go/IDL to build the final output
- If schema validation is done, it may include logic to ensure the produced JSON adheres to the MetaFFI IDL schema.

## Summary
This directory implements the Go IDL plugin, which is the first step in making Go code interoperable via MetaFFI. It automates the extraction of interface definitions from Go codebases and emits a standardized JSON-based IDL that describes everything MetaFFI needs to know to call into Go.

By using this tool, developers avoid writing IDL by hand and ensure that all callable entities are accurately and consistently described. This is essential for downstream code generation and runtime invocation.

(For actual code generation and binary compilation based on the IDL, see lang-plugin-go/compiler/.)


# Go Compiler Plugin (`lang-plugin-go/compiler/`)

This directory implements the **MetaFFI compiler plugin for Go**, enabling Go to act as a **guest language** by generating C-callable wrappers around Go functions. This is essential because Go does not natively expose symbols that are callable from C without special build directives.

## Purpose

- Implements the plugin interface defined in `plugin-sdk/compiler/language_plugin_interface.h`.
- Consumes MetaFFI IDL and generates Go wrapper code with `//export` directives.
- Compiles the wrappers into a shared object (`.so` / `.dll`) that the Go runtime plugin can dynamically load.
- Optionally supports host-mode code generation for calling foreign entities from Go.

## Architectural Role

This plugin is used at **compile time**, typically via the MetaFFI CLI:

```
metaffi compile --lang=go --idl=some.idl.json --mode=guest
```

It parses the IDL JSON and generates:
- Go source files containing `//export`ed functions that wrap native Go logic.
- A compiled shared object exposing these wrappers as C-callable functions.
- (Optionally) Go host-side wrappers that call MetaFFI from native Go code.

## Guest Compilation Workflow

Guest compilation is **mandatory** for Go.

1. **Input**: MetaFFI IDL JSON (e.g., generated by `lang-plugin-go/idl/`)
2. **Code Generation**:
   - For each function, generate a Go `//export` function using `cgo`
   - The wrapper:
     - Accepts arguments as CDTs
     - Converts them to native Go types
     - Calls the real Go function
     - Converts the result to CDTs
3. **Compilation**:
   - Use `go build -buildmode=c-shared` to build a `.so`/`.dll`
   - The exported C symbols will be dynamically loaded by the Go runtime plugin
4. **Output**:
   - Shared object: `MetaFFIGuest.so` / `MetaFFIGuest.dll`
   - Optionally, symbol mapping or metadata files

## Host Compilation (Optional)

In host mode, the plugin can generate Go wrapper functions that internally use MetaFFI’s API (in `api/`) to call foreign functions described in the IDL.

For example, from:

```json
{
  "name": "Add",
  "parameters": [...],
  "return_types": [...]
}
```

It might generate:

```go
func Add(a int, b int) int {
    return metaffi.Invoke("Add", a, b).(int)
}
```

This makes foreign functions feel native in Go source code, improving DX.

## Core Implementation Files

- `main.go`: Registers plugin and exposes entrypoints.
- `GuestCompiler.go`: Controls guest compilation pipeline.
- `GenerateGuest.go`: Renders Go wrappers from IDL.
- `CompilerUtils.go`: I/O, file generation, IDL parsing.
- `GoTypesMapping.go`: CDTS ↔ Go type mapping.
- `CodeTemplates/*.go`: Templates for generating function wrappers.

These leverage shared definitions and helpers from `plugin-sdk/compiler/go/`.

## Summary

This directory is the **Go compiler plugin**, which is required for enabling Go as a **guest language** in MetaFFI.

It:
- Translates MetaFFI IDL to C-callable Go wrappers.
- Compiles Go code into a shared object for the runtime plugin to load.
- Optionally generates host wrappers for ergonomic Go code.

It’s a critical part of the plugin chain: `idl/` → `compiler/` → `runtime/`.

(For runtime execution, see `lang-plugin-go/runtime/`; for host-side APIs, see `api/`.)

# Go API Module (`lang-plugin-go/api/`)

This directory implements the **MetaFFI API for Go**, which enables Go programs to act as the *host* language in cross-language calls. The Go API abstracts MetaFFI’s C core (XLLR) behind idiomatic Go functions and types.

## Purpose

- This module is the primary entry point for Go developers using MetaFFI.
- It allows Go to:
  - Load and use other language runtimes (e.g., Python, Java).
  - Load foreign modules/entities via MetaFFI IDL.
  - Call foreign functions with native Go values.
  - Handle foreign objects via opaque handles or native mappings.
  
This makes Go a **host language** capable of interacting with any guest supported by MetaFFI.

## Core Features

- **Wrapper Around XLLR:** The Go API uses `cgo` to wrap the XLLR shared library. All core functions (`xllr_load_runtime_plugin`, `xllr_make_callable`, etc.) are invoked via `import "C"` bindings and linked during runtime using dynamic loading.
  
- **Runtime Plugin Management:**
  - Load a foreign language plugin (e.g., Python) via `LoadRuntime(language string)`.
  - Load a foreign module and retrieve its entities by name.
  - Manage lifecycle (e.g., `UnloadRuntime`, `FreeCDT`, etc.).

- **CDTS Conversions:** The API includes logic to convert between Go native types and MetaFFI’s Common Data Types System (CDTS):
  - Primitives (ints, floats, strings).
  - Arrays and slices.
  - Maps (where supported).
  - Opaque handles for foreign objects.
  
  Conversion logic is abstracted into reusable functions so that Go code can easily pass parameters and read return values.

- **Error Handling:** MetaFFI propagates errors from foreign runtimes via CDTS or string error messages. The Go API captures these errors and wraps them in Go `error` values. It ensures that errors are not lost and are idiomatic in the Go environment.

- **Handle Management:** Foreign objects (e.g., a Java object or Python class instance) can be passed into Go as *opaque handles*. These are represented by Go types like `MetaFFIHandle` or `OpaqueObject`. The API provides accessors and casting utilities for safe handling.

- **Concurrent Safety:** Some functions include internal synchronization to safely manage shared resources. This is important when Go routines interact with foreign threads or runtimes that are not thread-safe.

## Usage

To use Go API for MetaFFI the developer needs to import:
```go
import(
    "github.com/MetaFFI/lang-plugin-go/api"
    "github.com/MetaFFI/plugin-sdk/compiler/go/IDL"
)

// example to use OpenJDK
runtime = api.NewMetaFFIRuntime("openjdk")
err := runtime.LoadRuntimePlugin()
// handle error

testRuntimeModule, err = runtime.LoadModule("./sanity/TestRuntime.class")
// handle error

hellowWorld, err := testRuntimeModule.Load(`class=sanity.TestRuntime,callable=helloWorld`, nil, nil)
// handle error

// call hello world
_, err = hellowWorld()
// handle error
```

# Integration with Compiler Plugin
While this module is manually written, the Go host compiler may generate Go code that uses this API to wrap foreign modules. This means the API must remain stable and extensible to support generated code.

# Summary
This directory is crucial for Go-to-foreign-language interoperability. It hides the complexity of FFI and cross-language runtime invocation, allowing Go developers to write clean, idiomatic code that interoperates with Python, Java, and others. It also provides core utilities for converting between Go types and CDTS, managing foreign handles, and invoking loaded functions from the MetaFFI system.

(For the runtime implementation and cross-language call details, see the runtime/ and go-runtime/ prompts.)