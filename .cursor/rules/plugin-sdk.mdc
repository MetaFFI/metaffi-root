---
description: get information about plugin-sdk
alwaysApply: false
---
# MetaFFI Plugin SDK Overview

The **MetaFFI Plugin SDK** is a standardized, reusable toolkit designed for developing MetaFFI language plugins. It provides core interfaces, helper libraries, utilities, and scaffolding to ensure all plugins interact with MetaFFI’s core (XLLR) in a consistent and robust manner, minimizing the need to "reinvent the wheel" for each language.

---

## Structure

The SDK is typically included as a `plugin-sdk/` subdirectory in every plugin repository as well as in the main `metaffi-core` repository (often as a git submodule). Its key subfolders are:

```
plugin-sdk/
├── runtime/ # Core runtime components (CDTS, XLLR API, plugin interfaces)
├── utils/ # Utilities: dynamic/shared library loading, path parsing, etc.
├── compiler/ # Compiler/IDL interfaces and Go implementations
└── [tests]/ # SDK self-tests
```


---

## Key Components

### 1. **Interface Definitions (C Headers)**
- **`runtime_plugin_interface.h`** – Declares the C functions that runtime plugins must implement (e.g., `load_runtime`, `free_runtime`, `load_module`, `load_entity`, `invoke`, etc.). These are called by XLLR for runtime lifecycle and foreign entity management.
- **`language_plugin_interface.h`** – Interface for compiler plugins, defining functions like `compile_guest` and `compile_host` to generate glue code for cross-language calls.
- **`idl_plugin_interface.h`** – IDL plugin entrypoints for extracting interface definitions from source/binary code.
- These headers act as a **contract** between MetaFFI core and all plugins, ensuring uniform exported C functions.

### 2. **XLLR C-API Loader**
- **`xllr_api.h` & `xllr_capi_loader.c`** – Mechanisms to dynamically load XLLR’s API at runtime and populate function pointers to its exported functions (e.g., `xllr_load_runtime_plugin`). This decouples plugins from hard linking against XLLR and improves deployment flexibility.
- Used in both plugins and API modules to enable core interaction at runtime.

### 3. **Common Data Types System (CDTS) Implementation**
- **`cdt.h/cpp`, `cdts_wrapper.h/cpp`, `cdts_traverse_construct.h/cpp`** – Implementation of the language-neutral type system (CDTS), which represents primitive types, objects, opaque handles, and nested data. Includes routines for constructing, traversing, and converting between native language types and CDTs.
- Opaque handle support allows complex/native objects to cross boundaries as references, with the plugin managing the actual object table.

### 4. **Memory Management Utilities**
- Provides a unified memory allocation/deallocation API (`xllr_malloc`/`xllr_free` in `xllr_api.h`), ensuring that all memory crossing FFI boundaries is managed safely and compatibly, regardless of CRT/compiler.
- Additional utilities (e.g., `defines.h`, `expand_env.*`) assist with common tasks like environment variable expansion.

### 5. **Dynamic Library and Function Loading**
- **`utils/` subdirectory** contains:
  - `library_loader.cpp/h` – Platform-agnostic loading of shared libraries and function symbols (Windows and POSIX).
  - `plugin_loader.hpp`, `function_loader.hpp` – Templated/convenience utilities to load plugins and bind functions safely.
  - `entity_path_parser.*` – Utilities for parsing and splitting entity/module paths.
  - General helpers like `scope_guard.hpp`, `singleton.hpp` for resource management and singleton patterns.
  - `xllr_api_wrapper.cpp/h` – Wraps XLLR C API calls in C++-friendly or error-safe forms.

### 6. **Go SDK for Compiler & IDL Plugins**
- **`plugin-sdk/compiler/go/`** – A Go library with:
  - Typed Go structs matching the MetaFFI IDL JSON schema, enabling easy loading, editing, and code generation.
  - Helper modules for templating and common code generation patterns.
  - Framework support for exporting standard plugin entrypoints, reducing boilerplate for plugin authors.
  - Aids both compiler and IDL plugin implementations written in Go.

### 7. **Testing and Miscellaneous**
- The SDK includes test harnesses (e.g., `run_sdk_tests.cmake`, `*_test.cpp`) to validate CDTS conversion, XLLR API loading, and other critical behaviors, ensuring SDK stability across all plugins.

---

## Usage Guidelines

- **Implement Plugins Using SDK Headers:** Use the SDK headers to define and export the required C interface for each plugin type.
- **Follow CDTS:** All parameter and return value marshalling between languages must use CDTS types for interoperability.
- **Use XLLR Loader:** For any plugin/API that calls into MetaFFI core at runtime, use the dynamic API loader to remain decoupled from build-time dependencies.
- **Leverage Provided Utilities:** Use the provided utils for shared library loading, environment handling, and resource management to ensure cross-platform reliability.
- **Adhere to Coding Standards:** Follow MetaFFI’s conventions and export all required C functions; document and test all plugin components.

---

## Summary

The MetaFFI Plugin SDK is the **foundation for plugin development**, providing:
- Standardized C interface definitions for all plugin types (runtime, compiler, IDL).
- Implementation of the CDTS cross-language data system.
- Dynamic library/API loading utilities.
- Out-of-the-box scaffolding and helpers for compiler plugins (especially in Go).
- Memory safety and error handling support.
- Tests and examples to ensure plugin robustness.

By leveraging the Plugin SDK, plugin authors can focus on language-specific logic, while all low-level communication, marshalling, and resource management is handled by proven, reusable code—resulting in faster development and consistent, reliable interoperability across the entire MetaFFI ecosystem.
